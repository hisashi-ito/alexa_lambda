"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var adapter_1 = require("./adapter");
var voicePlayerSpeakDirective_1 = require("./directives/voicePlayerSpeakDirective");
var deviceAddressService_1 = require("./services/deviceAddressService");
var directiveService_1 = require("./services/directiveService");
var listManagementService_1 = require("./services/listManagementService");
var bodyTemplate1Builder_1 = require("./templateBuilders/bodyTemplate1Builder");
var bodyTemplate2Builder_1 = require("./templateBuilders/bodyTemplate2Builder");
var bodyTemplate3Builder_1 = require("./templateBuilders/bodyTemplate3Builder");
var bodyTemplate6Builder_1 = require("./templateBuilders/bodyTemplate6Builder");
var bodyTemplate7Builder_1 = require("./templateBuilders/bodyTemplate7Builder");
var listItemBuilder_1 = require("./templateBuilders/listItemBuilder");
var listTemplate1Builder_1 = require("./templateBuilders/listTemplate1Builder");
var listTemplate2Builder_1 = require("./templateBuilders/listTemplate2Builder");
var imageUtils_1 = require("./utils/imageUtils");
var textUtils_1 = require("./utils/textUtils");
var adapter_2 = require("./adapter");
exports.Adapter = adapter_2.Adapter;
var handler_1 = require("./handler");
exports.Handler = handler_1.Handler;
var responseBuilderShim_1 = require("./responseBuilderShim");
exports.ResponseBuilder = responseBuilderShim_1.ResponseBuilder;
exports.services = {
    DeviceAddressService: deviceAddressService_1.DeviceAddressService,
    DirectiveService: directiveService_1.DirectiveService,
    ListManagementService: listManagementService_1.ListManagementService,
};
exports.directives = {
    VoicePlayerSpeakDirective: voicePlayerSpeakDirective_1.VoicePlayerSpeakDirective,
};
exports.templateBuilders = {
    BodyTemplate1Builder: bodyTemplate1Builder_1.BodyTemplate1Builder,
    BodyTemplate2Builder: bodyTemplate2Builder_1.BodyTemplate2Builder,
    BodyTemplate3Builder: bodyTemplate3Builder_1.BodyTemplate3Builder,
    BodyTemplate6Builder: bodyTemplate6Builder_1.BodyTemplate6Builder,
    BodyTemplate7Builder: bodyTemplate7Builder_1.BodyTemplate7Builder,
    ListItemBuilder: listItemBuilder_1.ListItemBuilder,
    ListTemplate1Builder: listTemplate1Builder_1.ListTemplate1Builder,
    ListTemplate2Builder: listTemplate2Builder_1.ListTemplate2Builder,
};
exports.utils = {
    ImageUtils: imageUtils_1.ImageUtils,
    TextUtils: textUtils_1.TextUtils,
};
function handler(event, context, callback) {
    if (!event.session) {
        event.session = {
            new: null,
            user: null,
            sessionId: null,
            application: null,
            attributes: {}
        };
    }
    else if (!event.session.attributes) {
        event.session.attributes = {};
    }
    var adapter = new adapter_1.Adapter(event, context, callback);
    adapter.setMaxListeners(Infinity);
    return adapter;
}
exports.handler = handler;
function CreateStateHandler(state, requestHandler) {
    if (!requestHandler) {
        requestHandler = {};
    }
    for (var _i = 0, _a = Object.keys(requestHandler); _i < _a.length; _i++) {
        var eventName = _a[_i];
        if (typeof (requestHandler[eventName]) !== 'function') {
            throw new Error("Event handler for '" + eventName + "' was not a function");
        }
        if (state) {
            var newEventName = eventName + state;
            Object.defineProperty(requestHandler, newEventName, Object.getOwnPropertyDescriptor(requestHandler, eventName));
            delete requestHandler[eventName];
        }
    }
    return requestHandler;
}
exports.CreateStateHandler = CreateStateHandler;
//# sourceMappingURL=index.js.map